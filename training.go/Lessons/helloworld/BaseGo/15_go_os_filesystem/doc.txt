package main

import "fmt"

/*
"defer" permet d'executer un code au moment ou on sort de la fonction

func main() {
	f := os.OpenFile("foo.txt")

	if condition1 {
		return // Oops...! pas de close ici!
	}
	// code
	f.Close()
}


func main() {

	J'ouvre mon fichier
	f := os.OpenFile("foo.txt")

	S'executera quand on sort de main()
	defer f.Close()

	if condition1 {
		return // Oops...! pas de close ici!
	}

}
*/

func start() {
	fmt.Println("Start")
}

func finish() {
	fmt.Println("Finish")
}

// Entry point of program
func main() {

	start()

	// defer - afin que la fonction soit appelee a la fin d'execution
	// LIFO = Last In First Out
	defer finish()

	// finish() .5
	// Goodbye Bob .4
	// Goodbye Alice .3
	// Goodbye Bobette .2
	// Goodbye John .1

	names := []string{"Bob", "Alice", "Bobette", "John"}

	for _, n := range names {
		fmt.Printf("Hello %v\n", n)
		fmt.Printf("Goodbye %v\n", n)
	}
}
package main


/*
Function 1:
func FindReplaceFile(src, old, new string) (occ int, lines []int, err error)
src : nom du fichier source
old/new: ancien mot / nouveau mot
occ: nombre d'occurences de old
lines: slice des numeros de lignes ou old a ete trouve
err: indique erreur de la fonction

Function 2:
func ProcessLine(line, old, new string) (found bool, res string, occ int)
line: ligne a traiter
old/new: ancien mot / nouveau mot
found: vrai si moins occurence traite
res: resultat de remplacement (res == line si aucun changement!)
occ: nombre d'occurence de old dans la ligne

Outils - Package bufio
Lire de fichier ligne par ligne

scanner := bufio.NewScanner(srcFile)

for scanner.Scan () {
	t := scanner.Text() // t contient une ligne
}

Outils - package strings
Manipuler des strigns

c:= strings.Countains("go ruby java", "go") c == true
cnt := strings.Count("go go go", "go") cnt == 3
res := strings.Replace("go", "python", 0) res == python

===========================================================
Countains() - permet de savoir si un text contient une chaine de characters ou non)
Count()     - permet de savoir le nombres d'occurences ou non
Replace()   - permet de remplace la chaine de characteres 

===========================================================
Bonus 
 * Remplacer le en minuscule
   - Go et go ==> Python et python
 * Stocker le resultat dans un fichier
   - Modifier legerement FindReplaceFile()

============================================================
Outils - package bufio
Code a utiliser pour ecrire ligne par ligne dans un fichier

dstFile (destination file)
writer := bufio.NewWriter(dstFile)
defer writer.Flush() 
permet de rendre l'ecriture du disque definitif et de vider le buffer contenu dans writer
fmt.Fprintln(writer, "Texte d'une ligne")
*/


func main() {
	
}